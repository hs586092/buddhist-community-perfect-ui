name: 🪷 불교 커뮤니티 배포

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # 코드 품질 검사
  quality-checks:
    name: 📋 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🔍 타입 검사
      run: npm run type-check
      
    - name: 🧹 린트 검사
      run: npm run lint
      
    - name: 💅 포맷 검사
      run: npm run format:check
      
    - name: 🧪 단위 테스트
      run: npm run test run
      
    - name: 📊 테스트 커버리지
      run: npm run test:coverage

  # 빌드 및 성능 테스트
  build-and-test:
    name: 🏗️ 빌드 & 성능 테스트
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🏗️ 프로덕션 빌드
      run: npm run build
      env:
        VITE_APP_TITLE: "불교 커뮤니티 - 선원"
        VITE_APP_DESCRIPTION: "전국 불자들의 따뜻한 소통 공간"
        
    - name: 📦 빌드 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7
        
    - name: 🎭 Playwright 설치
      run: npx playwright install --with-deps
      
    - name: 🧪 E2E 테스트
      run: npm run test:e2e
      
    - name: 📊 E2E 테스트 리포트 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

  # Lighthouse 성능 측정
  lighthouse:
    name: 🚀 성능 측정 (Lighthouse)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 📦 빌드 아티팩트 다운로드
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    - name: 🏃‍♂️ 정적 서버 실행
      run: |
        npm install -g serve
        serve -s dist -l 3000 &
        sleep 5
        
    - name: 🚀 Lighthouse CI 실행
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: '.lighthouserc.json'
        temporaryPublicStorage: true
        
  # Vercel 배포
  deploy-vercel:
    name: 🚀 Vercel 배포
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🚀 Vercel 배포
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./

  # Netlify 배포
  deploy-netlify:
    name: 🌐 Netlify 배포
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🏗️ 빌드
      run: npm run build
      
    - name: 🌐 Netlify 배포
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Firebase 배포 (선택사항)
  deploy-firebase:
    name: 🔥 Firebase 배포
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test]
    if: github.ref == 'refs/heads/production'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 의존성 설치
      run: npm ci
      
    - name: 🏗️ 빌드
      run: npm run build
      
    - name: 🔥 Firebase 배포
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: buddhist-community
        channelId: live

  # 배포 후 검증
  post-deploy-verification:
    name: ✅ 배포 후 검증
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-netlify]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🔍 사이트 가용성 확인
      run: |
        echo "🔍 Vercel 사이트 확인 중..."
        curl -f https://buddhist-community.vercel.app || exit 1
        
        echo "🔍 Netlify 사이트 확인 중..."
        curl -f https://buddhist-community.netlify.app || exit 1
        
        echo "✅ 모든 사이트가 정상적으로 배포되었습니다!"
        
    - name: 📊 배포 알림
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          🪷 불교 커뮤니티 배포 완료
          • Vercel: https://buddhist-community.vercel.app
          • Netlify: https://buddhist-community.netlify.app
          상태: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}